Guidelines
	- Syntax should be easy to type, and minimize control characters.
	- The smallest amount of variation is a word: don't waste time making versions with alternate punctuation. Also don't do minor variants like dialog tags.
		- A good metric to shoot for is only have a variant when it's interesting. Avoid minor imperceptible variations.
	- No nesting (to prevent wasting time on sub-probabilities of sub-probabilities). Every alternative is either seen or not.
	- Think extremely hard before using a probability less than 10.

Collapser should:
	- Track each usage of control characters across multiple runs. When the usage has changed, either internally or the ~50 characters before/after, have the user confirm it by showing all the possible variants in context (including author-pref). (Key is position + contents).

Problems:
- What if we have a macro where the author-preferred way is to expand it one way some times and another way others?
- Copy/paste from OO:
	- Fix paragraph breaks
	- Find italics/other formatting
	- Elipses. Replace … with Latex version.

** Basic Formatting:

Blank line between paragraphs.

Three dashes for em-dash, or the em-dash character directly.  

	Look---Peter---the thing is...

Write extended Unicode characters directly.

	Dvořák

Line break by ending line with \\ (same as Latex).

To ensure smart quotes work correctly, paste them directly into the document. “ ” ‘ ’ Latex or other renderers may try to guess but they often get it wrong.


** Basic Syntax:

Control characters should never be ones that would appear in the manuscript. So far they are:
	[ ] Begin and end a control sequence.
	{ } Macro/format block
	|	Divide alternatives
	>	Conditional text
	@	Indicates a variable	
	^	Author-preferred
	#	Comment
	~	Always print this block.
	/	Split params in formatting block
	*	Surrounds control sequence labels

Start a line with a # for a comment to be stripped/ignored.

	# This is a comment.

The basic format is to specify pipe-separated alternatives wrapped in square brackets. The below will randomly print "alpha", "beta", or "gamma".

	[alpha|beta|gamma]

It's valid to have an empty option: the below will print "alpha" or nothing randomly.

	[alpha|]     => this is the same as [alpha]

The "author's preferred version" is assumed to be the first one listed. When this is not possible, it can also be indicated with a ^ immediately proceeding the content. "Output author-preferred" is a flag that can be set in Collapser; the code also has a slight preference for the author-preferred version (maybe 25%).

	[alpha|^beta|gamma]   (or, better):    [beta|alpha|gamma]
	[|alpha|beta]		=> author's preferred version is to print nothing

If there is just a single item, it will either randomly print, or not. Use ^ if printing is author-preferred, omit if not.

	[alpha]		Print "alpha" randomly (or never when author-preferred)
	[^alpha]	Print "alpha" randomly (or always when author-preferred)

If you preface a single block of text with ~, it will always be printed. (This is useful for macros.)

	[~alpha]	Always prints "alpha"

Nesting is not allowed, though you can get around that a bit using a macro. A tag can span potentially dozens of paragraphs. 


** Probabilities

You can preface an alternative by an integer between 0 and 99 and a > sign to give a percentage chance that version will be chosen. If the values add up to < 100, show nothing the other percent of the time. It's invalid for values to sum to > 100. If one alternative uses a number, they all must. The author-preferred indicator should go on the token, not the number

	[80>alpha|10>beta|10>^gamma]
	[50>alpha]  => (equivalent to "[alpha]")


** Variables

You can define a boolean variable, which always starts with @, by starting your line with the reserved word DEFINE (caps matter). This will be randomly set to true or false, unless you give it a probability. Author-preferred goes before the @ (which is part of the variable name). 

	[DEFINE @wordy]    => randomly true/false, or never true if author-preferred
	[DEFINE 80>@wordy] => @wordy is true 80% of the time, or never if A-P.
	[DEFINE 10>^@wordy] => @wordy is true 10% of the time, or always if A-P.

Variables can contain letters, numbers, -, or _ and can't start with a number. Prefer camelCase.

You can also define an enum variable by specifying multiple options numerically: these must always add up to 100.

	[DEFINE 50>@wordy|50>^@taciturn]

Restrict text to showing only when a defined variable is true. Note that it's a mistake to indicate author-preferred here: that's set by the variable.

	[@wordy>he said loquaciously] 

Can specify an else by providing one other alternative, which can be empty.

	[@wordy>he said loquaciously|he summarized] 
	[@angry>|He was very calm. ]


** Macros

Define these by starting with MACRO in caps, a space, the macro label. The required replacement immediately following will be used whenever the macro is expanded. 

	[MACRO it's not][75>it's not|25>it isn't]

If you use STICKY_MACRO, the choice will be made once and then consistently for the rest of this collapse.

	[STICKY_MACRO Soda][Pepsi|Sprite|Coke]

Invoke a macro in text by wrapping it in curly braces, or (if its name has no spaces) prefacing it with $.

	"But {it's not} relevant"
	She ordered a $Soda.


** Faking Conditional Logic **

Conditional logic is not yet supported, but you can use macros to get around this if needed. For instance.

	@wordy AND @lostKeys -> I can't find my keys!

		[@wordy>{ifLostKeys}]
		[MACRO ifLostKeys][@lostKeys>I can't find my keys!]

	@wordy AND NOT @lostKeys -> I'm wordy and organized!

		[@wordy>{ifNotLostKeys}]
		[MACRO ifNotLostKeys][@lostKeys>|I can't find my keys!]

	@wordy OR @lostKeys -> I'm wordy or confused!

		[@wordy>{txt}|{orLostKeys}]
		[MACRO orLostKeys][@lostKeys>{txt}]
		[MACRO txt][~I'm wordy or confused!]

** Gotos **

You can jump to a later point in the text by invoking a macro beginning with the word "jump" followed by a label.

	{JUMP myLabel}

You can then later have a label: the text will continue afterwards.

	[LABEL myLabel]


** Formatting Codes

The system has a number of predefined formatting codes to print things in certain ways. They can either take parameters or not. These can appear within control sequences and are output verbatim. 

	{section_break}
	{chapter/2}
	{part/ONE/DOWNSTAIRS/Surely tis nobler.../William Shakespeare}
	{verse/text}
	{verse_inline/text}   => no pp breaks
	{pp}
	{i/italics}
	{vspace/9}

Since they both use curly braces and nesting is not allowed, macros don't play well with formatting codes. To get around this, you can reference a macro with no spaces in its name by prefacing it with a $, either in a formatting code or anywhere. However note that doing this to nest formatting codes within each other might lead to layout/rendering issues.

	[MACRO destination][movies|store|beach]
	{i/going to the $destination}


** Control Sequence Labels **

To enable the "alternate version" End Matter bonus feature, authors can manually label a control sequence (which allows code to later retrieve and re-render that sequence). Put an identifier surrounded by asterisks as the first thing after the opening bracket to do this.

	[*Label1*alpha|omega]
	[*AlphaOrOmegaVersion*@alpha>version one|@beta>version two]
	[*AnotherLabel*50>X|50>Y]

